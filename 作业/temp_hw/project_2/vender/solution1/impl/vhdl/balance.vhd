-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity balance is
port (
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    sum_i : IN STD_LOGIC_VECTOR (2 downto 0);
    sum_o : OUT STD_LOGIC_VECTOR (2 downto 0);
    sum_o_ap_vld : OUT STD_LOGIC;
    cash : IN STD_LOGIC_VECTOR (1 downto 0);
    tissue : OUT STD_LOGIC_VECTOR (1 downto 0);
    tissue_ap_vld : OUT STD_LOGIC );
end;


architecture behav of balance is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "balance_balance,hls_ip_2022_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=0.978000,HLS_SYN_LAT=0,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=0,HLS_SYN_LUT=20,HLS_VERSION=2022_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal cash_read_read_fu_40_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal sum_read_read_fu_46_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_ce_reg : STD_LOGIC;


begin



    ap_done <= ap_start;
    ap_idle <= ap_const_logic_1;
    ap_ready <= ap_start;
    cash_read_read_fu_40_p2 <= cash;

    sum_o_assign_proc : process(ap_start, sum_i, cash_read_read_fu_40_p2, sum_read_read_fu_46_p2)
    begin
        if ((((ap_start = ap_const_logic_1) and (sum_read_read_fu_46_p2 = ap_const_lv3_0) and (cash_read_read_fu_40_p2 = ap_const_lv2_1)) or ((ap_start = ap_const_logic_1) and (sum_read_read_fu_46_p2 = ap_const_lv3_1) and (cash_read_read_fu_40_p2 = ap_const_lv2_0)))) then 
            sum_o <= ap_const_lv3_1;
        elsif ((((ap_start = ap_const_logic_1) and (sum_read_read_fu_46_p2 = ap_const_lv3_1) and (cash_read_read_fu_40_p2 = ap_const_lv2_1)) or ((ap_start = ap_const_logic_1) and (sum_read_read_fu_46_p2 = ap_const_lv3_2) and (cash_read_read_fu_40_p2 = ap_const_lv2_0)))) then 
            sum_o <= ap_const_lv3_2;
        elsif ((((ap_start = ap_const_logic_1) and (sum_read_read_fu_46_p2 = ap_const_lv3_0) and (cash_read_read_fu_40_p2 = ap_const_lv2_0)) or ((ap_start = ap_const_logic_1) and (sum_read_read_fu_46_p2 = ap_const_lv3_2) and (cash_read_read_fu_40_p2 = ap_const_lv2_1)))) then 
            sum_o <= ap_const_lv3_0;
        else 
            sum_o <= sum_i;
        end if; 
    end process;


    sum_o_ap_vld_assign_proc : process(ap_start, cash_read_read_fu_40_p2, sum_read_read_fu_46_p2)
    begin
        if ((((ap_start = ap_const_logic_1) and (sum_read_read_fu_46_p2 = ap_const_lv3_0) and (cash_read_read_fu_40_p2 = ap_const_lv2_0)) or ((ap_start = ap_const_logic_1) and (sum_read_read_fu_46_p2 = ap_const_lv3_0) and (cash_read_read_fu_40_p2 = ap_const_lv2_1)) or ((ap_start = ap_const_logic_1) and (sum_read_read_fu_46_p2 = ap_const_lv3_1) and (cash_read_read_fu_40_p2 = ap_const_lv2_0)) or ((ap_start = ap_const_logic_1) and (sum_read_read_fu_46_p2 = ap_const_lv3_1) and (cash_read_read_fu_40_p2 = ap_const_lv2_1)) or ((ap_start = ap_const_logic_1) and (sum_read_read_fu_46_p2 = ap_const_lv3_2) and (cash_read_read_fu_40_p2 = ap_const_lv2_0)) or ((ap_start = ap_const_logic_1) and (sum_read_read_fu_46_p2 = ap_const_lv3_2) and (cash_read_read_fu_40_p2 = ap_const_lv2_1)))) then 
            sum_o_ap_vld <= ap_const_logic_1;
        else 
            sum_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    sum_read_read_fu_46_p2 <= sum_i;
    tissue <= ap_const_lv2_1;

    tissue_ap_vld_assign_proc : process(ap_start, cash_read_read_fu_40_p2, sum_read_read_fu_46_p2)
    begin
        if (((ap_start = ap_const_logic_1) and (sum_read_read_fu_46_p2 = ap_const_lv3_2) and (cash_read_read_fu_40_p2 = ap_const_lv2_1))) then 
            tissue_ap_vld <= ap_const_logic_1;
        else 
            tissue_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

end behav;
